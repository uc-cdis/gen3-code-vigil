apiVersion: batch/v1
kind: CronJob
metadata:
  name: load-test-metrics
  namespace: default
spec:
  schedule: "*/120 * * * *"
  successfulJobsHistoryLimit: 2
  failedJobsHistoryLimit: 2
  jobTemplate:
    spec:
      backoffLimit: 2
      template:
        spec:
          serviceAccountName: ci-metrics-sa
          restartPolicy: OnFailure
          containers:
          - name: load-test-metrics
            image: quay.io/cdis/ci_metrics:master
            env:
              - name: METRICS_DB_DSN
                valueFrom:
                  secretKeyRef:
                    name: ci-metrics-db
                    key: "METRICS_DB_DSN"
            command:
              - /bin/sh
              - -c
              - |
                #!/bin/bash
                set -euo pipefail

                QUEUE_URL="https://sqs.us-east-1.amazonaws.com/707767160287/load-test-metrics-sqs"
                REGION="${AWS_REGION:-us-east-1}"  # fallback if AWS_REGION not set

                while true; do
                    RESPONSE=$(aws sqs receive-message \
                        --queue-url "$QUEUE_URL" \
                        --max-number-of-messages 10 \
                        --wait-time-seconds 10 \
                        --region "$REGION")

                    MESSAGES=$(echo "$RESPONSE" | jq -c '.Messages[]?')

                    if [ -z "$MESSAGES" ]; then
                        echo "No more messages found. Exiting."
                        break
                    fi

                    echo "$MESSAGES" | while read -r message; do
                        RECEIPT_HANDLE=$(echo "$message" | jq -r '.ReceiptHandle')
                        BODY=$(echo "$message" | jq -r '.Body')

                        echo "Processing message: $BODY"

                        RUN_DATE=$(echo "$BODY" | jq -r '.run_date')
                        RUN_NUM=$(echo "$BODY" | jq -r '.run_num')
                        RELEASE_VERSION=$(echo "$BODY" | jq -r '.release_version')
                        SUITE=$(echo "$BODY" | jq -r '.test_suite')
                        CASE=$(echo "$BODY" | jq -r '.test_case')
                        CHECKS_FAILS=$(echo "$BODY" | jq -r '.checks_fails')
                        CHECKS_PASSES=$(echo "$BODY" | jq -r '.checks_passes')
                        CHECKS_VALUE=$(echo "$BODY" | jq -r '.checks_value')
                        HTTP_REQ_DURATION_AVG=$(echo "$BODY" | jq -r '.http_req_duration_avg')
                        HTTP_REQ_DURATION_MIN=$(echo "$BODY" | jq -r '.http_req_duration_min')
                        HTTP_REQ_DURATION_MED=$(echo "$BODY" | jq -r '.http_req_duration_med')
                        HTTP_REQ_DURATION_MAX=$(echo "$BODY" | jq -r '.http_req_duration_max')
                        HTTP_REQ_DURATION_P90=$(echo "$BODY" | jq -r '.http_req_duration_p90')
                        HTTP_REQ_DURATION_P95=$(echo "$BODY" | jq -r '.http_req_duration_p95')
                        HTTP_REQ_DURATION_THRESHOLD_AVG_LT_3000=$(echo "$BODY" | jq -r '.http_req_duration_threshold_avg_lt_3000')
                        HTTP_REQ_DURATION_THRESHOLD_P95_LT_15000=$(echo "$BODY" | jq -r '.http_req_duration_threshold_p95_lt_15000')
                        DATA_SENT_COUNT=$(echo "$BODY" | jq -r '.data_sent_count')
                        DATA_SENT_RATE=$(echo "$BODY" | jq -r '.data_sent_rate')
                        ITERATIONS_COUNT=$(echo "$BODY" | jq -r '.iterations_count')
                        ITERATIONS_RATE=$(echo "$BODY" | jq -r '.iterations_rate')


                        psql "$METRICS_DB_DSN" <<EOF
                INSERT INTO load_test_metrics_data (
                    run_date,
                    run_num,
                    release_version,
                    test_suite,
                    test_case,
                    checks_fails,
                    checks_passes,
                    checks_value,
                    http_req_duration_avg,
                    http_req_duration_min,
                    http_req_duration_med,
                    http_req_duration_max,
                    http_req_duration_p90,
                    http_req_duration_p95,
                    http_req_duration_threshold_avg_lt_3000,
                    http_req_duration_threshold_p95_lt_15000,
                    data_sent_count,
                    data_sent_rate,
                    iterations_count,
                    iterations_rate
                ) VALUES (
                    '$RUN_DATE',
                    $RUN_NUM,
                    '$RELEASE_VERSION',
                    '$SUITE',
                    '$CASE',
                    $CHECKS_FAILS,
                    $CHECKS_PASSES,
                    $CHECKS_VALUE,
                    $HTTP_REQ_DURATION_AVG,
                    $HTTP_REQ_DURATION_MIN,
                    $HTTP_REQ_DURATION_MED,
                    $HTTP_REQ_DURATION_MAX,
                    $HTTP_REQ_DURATION_P90,
                    $HTTP_REQ_DURATION_P95,
                    $HTTP_REQ_DURATION_THRESHOLD_AVG_LT_3000,
                    $HTTP_REQ_DURATION_THRESHOLD_P95_LT_15000,
                    $DATA_SENT_COUNT,
                    $DATA_SENT_RATE,
                    $ITERATIONS_COUNT,
                    $ITERATIONS_RATE
                );
                EOF


                        aws sqs delete-message \
                            --queue-url "$QUEUE_URL" \
                            --receipt-handle "$RECEIPT_HANDLE" \
                            --region "$REGION"

                        echo "Message processed and deleted."
                    done
                done

                echo "Finished processing all messages."
