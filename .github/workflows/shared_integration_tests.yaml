name: Integration Tests

on:
  workflow_call:
    inputs:
      # needed to be set if repo name differs in quay
      QUAY_REPO:
        required: false
        type: string
      # set this for service PRs to select tests pertaining to the service under test
      # must match the marker used for the service, please look at the `markers` section of pyproject.toml
      SERVICE_TO_TEST:
        required: false
        type: string
      TEST_REPO_BRANCH:
        required: false
        type: string
        default: master
      CLOUD_AUTO_BRANCH:
        required: false
        type: string
        default: master
      HELM_BRANCH:
        required: false
        type: string
        default: master
      CI_ENV:
        required: false
        type: string
        default: default
      GEN3_INSTANCE_TYPE:
        required: false
        type: string
        default: HELM_LOCAL
      WORKING_DIR:
        required: false
        type: string
        default: gen3-code-vigil/gen3-integration-tests
      IS_NIGHTLY_RUN:
        required: false
        type: string
        default: "false"
      TEST_LABELS:
        required: false
        type: string
    secrets:
      CI_AWS_ACCESS_KEY_ID:
        required: false
      CI_AWS_SECRET_ACCESS_KEY:
        required: false
      JENKINS_API_TOKEN:
        required: false
      QA_DASHBOARD_S3_PATH:
        required: true
      CI_TEST_ORCID_USERID:
        required: true
      CI_TEST_ORCID_PASSWORD:
        required: true
      CI_TEST_RAS_EMAIL:
        required: true
      CI_TEST_RAS_PASSWORD:
        required: true
      CI_TEST_RAS_2_EMAIL:
        required: true
      CI_TEST_RAS_2_PASSWORD:
        required: true
      CI_SLACK_BOT_TOKEN:
        required: true
      CI_SLACK_CHANNEL_ID:
        required: true
      EKS_CLUSTER_NAME:
        required: false

permissions:
  id-token: write
  contents: read
  pull-requests: write
  issues: write

concurrency:
  group: ${{ github.workflow }}-${{ github.event.repository.name }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
    integration_tests:
        runs-on: ubuntu-latest

        defaults:
          run:
            # the test directory in gen3-code-vigil
            working-directory: ${{ inputs.WORKING_DIR }}

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          JENKINS_URL: "https://jenkins.planx-pla.net"
          JENKINS_USERNAME: "PlanXCyborg"
          JENKINS_PASSWORD: ${{ secrets.JENKINS_API_TOKEN }}
          REPO: ${{ github.event.repository.name }}
          REPO_FN: ${{ github.event.repository.full_name }}
          BRANCH: ${{ github.event.pull_request.head.ref }}
          PR_NUM: ${{ github.event.pull_request.number }}
          COMMIT_SHA: ${{ github.event.pull_request.head.sha }}
          RUN_NUM: ${{ github.run_number }}
          RUN_ID: ${{ github.run_id }}
          ATTEMPT_NUM: ${{ github.run_attempt }}
          CI_TEST_ORCID_USERID: ${{ secrets.CI_TEST_ORCID_USERID }}
          CI_TEST_ORCID_PASSWORD: ${{ secrets.CI_TEST_ORCID_PASSWORD }}
          CI_TEST_RAS_EMAIL: ${{ secrets.CI_TEST_RAS_EMAIL }}
          CI_TEST_RAS_PASSWORD: ${{ secrets.CI_TEST_RAS_PASSWORD }}
          CI_TEST_RAS_2_EMAIL: ${{ secrets.CI_TEST_RAS_2_EMAIL }}
          CI_TEST_RAS_2_PASSWORD: ${{ secrets.CI_TEST_RAS_2_PASSWORD }}
          CLOUD_AUTO_BRANCH: ${{ inputs.CLOUD_AUTO_BRANCH }}
          SLACK_CHANNEL: ${{ secrets.CI_SLACK_CHANNEL_ID }}
          EKS_CLUSTER_NAME : ${{ secrets.EKS_CLUSTER_NAME }}
          GEN3_INSTANCE_TYPE: ${{ inputs.GEN3_INSTANCE_TYPE }}
          GH_WORKSPACE: ${{ github.workspace }}
          HELM_BRANCH: ${{ inputs.HELM_BRANCH }}
          QUAY_REPO: ${{ inputs.QUAY_REPO }}
          IS_NIGHTLY_RUN: ${{ inputs.IS_NIGHTLY_RUN }}
          TEST_LABELS: ${{ inputs.TEST_LABELS }}

        steps:
          # Ensure the PR is run under the same org as an Internal PR
          # and not by external forks/PRs
          - name: Check if PR is from the same organization
            if: ${{ github.repository_owner != 'uc-cdis' }}
            working-directory: ${{ github.workspace }}
            run:  |
              echo "github.repository_owner - ${{ github.repository_owner }}"
              echo "Skip pull requests from repositories not within the same organization"
              echo "SKIP_TESTS=true" >> $GITHUB_ENV

          # Skip integration tests when the following PR labels are present:
          # not-ready-for-ci / decommission-environment
          - name: Skip integration tests for specific PR labels
            if: ${{ env.SKIP_TESTS != 'true' && github.event_name == 'pull_request' }}
            working-directory: ${{ github.workspace }}
            run: |
              if gh api repos/$REPO_FN/pulls/$PR_NUM --jq '.labels | map(.name) | .[] | select(. == "not-ready-for-ci" or . == "release-notes" or . == "decommission-environment")' | grep -q .; then
                  echo "Skipping CI since one of the PR labels is present - not-ready-for-ci / decommission-environment"
                  echo "SKIP_TESTS=true" >> $GITHUB_ENV
              fi

          # Checkout current repo
          - name: Checkout current repo
            if: ${{ env.SKIP_TESTS != 'true' }}
            uses: actions/checkout@v4


          # Skip tests when there are only markdown files
          - name: Skip integration tests if PR contains only Markdown files
            if: ${{ env.SKIP_TESTS != 'true' && github.event_name == 'pull_request' }}
            working-directory: ${{ github.workspace }}
            run: |
              git fetch -q
              FILE_TYPES=$(git diff --name-only origin/${{ github.base_ref }} HEAD | grep -v '@' | awk -F . '{print $NF}' | sort -u)
              echo $FILE_TYPES

              # Check if the only file type is markdown
              if [[ "$FILE_TYPES" == "md" ]]; then
                echo "All files are markdown, skipping step."
                echo "SKIP_TESTS=true" >> $GITHUB_ENV
              fi

          # Checkout master branch of gen3-code-vigil when another repo is under test
          - name: Checkout integration test code
            if: ${{ env.SKIP_TESTS != 'true' && github.event.repository.name  != 'gen3-code-vigil' }}
            uses: actions/checkout@v4
            with:
              repository: uc-cdis/gen3-code-vigil
              ref: ${{ inputs.TEST_REPO_BRANCH }}
              path: gen3-code-vigil

          # Checkout gen3-gitops repo
          - name: Checkout gen3-gitops repo
            if: ${{ env.SKIP_TESTS != 'true' }}
            uses: actions/checkout@v4
            with:
              repository: uc-cdis/gen3-gitops
              ref: 'master'
              path: gen3-gitops-ci

          - name: Get commit time
            if: ${{ env.SKIP_TESTS != 'true' && github.event_name == 'pull_request' }}
            run: |
              commit_time=$(gh api repos/$REPO_FN/commits/$COMMIT_SHA | jq -r '.commit.committer.date')
              echo "COMMIT_TIME=$commit_time" >> $GITHUB_ENV

          # gen3-integration-tests run with python 3.9
          - name: Set up Python
            if: ${{ env.SKIP_TESTS != 'true' }}
            uses: actions/setup-python@v5
            with:
              python-version: '3.9'

          - name: Set up Go
            if: ${{ env.SKIP_TESTS != 'true' }}
            uses: actions/setup-go@v5
            with:
              go-version: '1.17'

          # allure report generation needs node
          - name: Set up node
            if: ${{ env.SKIP_TESTS != 'true' }}
            uses: actions/setup-node@v4
            with:
              node-version: 20

          # Setup kubectl
          - name: Set Up kubectl
            if: ${{  env.GEN3_INSTANCE_TYPE == 'HELM_LOCAL' }}
            uses: azure/setup-kubectl@v3
            with:
              version: latest

          # Setup helm
          - name: Set Up Helm
            if: ${{ env.SKIP_TESTS != 'true' && env.GEN3_INSTANCE_TYPE == 'HELM_LOCAL' }}
            uses: azure/setup-helm@v4.3.0
            with:
              version: latest

          # # Setup GCP
          # - name: 'Authenticate with GCP'
          #   uses: 'google-github-actions/auth@v2'
          #   with:
          #     workload_identity_provider: 'projects/397853036191/locations/global/workloadIdentityPools/github-helm-ci-identity-pool/providers/github-provider'
          #     service_account: 'gh-actions-sa@dcf-integration.iam.gserviceaccount.com'

          # - name: 'Set up Cloud SDK'
          #   uses: 'google-github-actions/setup-gcloud@v2'
          #   with:
          #     version: '>= 363.0.0'

          # - name: 'Use gcloud CLI'
          #   run: 'gcloud info'


          # Install gen3-integration-tests dependencies
          # wamerican: data-simulator needs "/usr/share/dict/words" to generate data that isn't random strings
          - name: Install dependencies
            if: ${{ env.SKIP_TESTS != 'true' }}
            env:
              YQ_VERSION: v4.45.2
              YQ_BINARY: yq_linux_amd64
            run: |
              sudo rm -f /etc/apt/sources.list.d/github_git-lfs.list
              sudo apt update && sudo apt install wget -y
              sudo wget https://raw.githubusercontent.com/dwyl/english-words/master/words.txt -O /usr/share/dict/words
              sudo wget https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/${YQ_BINARY}.tar.gz -O - |\
              tar xz && sudo mv ${YQ_BINARY} /usr/bin/yq
              python -m pip install --upgrade pip
              if [[ "$REPO" == "data-simulator" ]]; then
                sed -i "s|\(data-simulator[[:space:]]*=[[:space:]]*{[^}]*rev[[:space:]]*=[[:space:]]*\"\)[^\"]*\(.*\)|\1$BRANCH\2|" pyproject.toml
              fi
              if [[ "$REPO" == "gen3sdk-python" ]]; then
                sed -i "s|^gen3 = \".*\"|gen3 = { git = \"https://github.com/uc-cdis/gen3sdk-python\", rev = \"$BRANCH\" }|" pyproject.toml
              fi
              pip install poetry
              poetry lock
              poetry install
              poetry show
              sudo apt update && poetry run playwright install-deps && poetry run playwright install --with-deps chromium
              sudo apt install openjdk-11-jre -y

          # Configure credentials to access cluster.
          - name: Configure AWS Credentials
            if: ${{ env.SKIP_TESTS != 'true' && env.GEN3_INSTANCE_TYPE == 'HELM_LOCAL' }}
            uses: aws-actions/configure-aws-credentials@v3
            with:
                role-to-assume: arn:aws:iam::707767160287:role/github-action-role
                role-session-name: GitHub_to_AWS_via_FederatedOIDC
                aws-region: "us-east-1"
                role-duration-seconds: 7200

          # Create kubeconfig to point at cluster.
          - name: Update kube config
            if: ${{ env.SKIP_TESTS != 'true' && env.GEN3_INSTANCE_TYPE == 'HELM_LOCAL' }}
            run: |
              aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region "us-east-1"

          # Ensure we do not cross the threshold of maximum number of CI envs allowed
          # The workflow waits if CI infrastructure is at capacity (MAX_ENVS, set to 10)
          - name: Wait for CI environment
            if: ${{ env.SKIP_TESTS != 'true' && env.GEN3_INSTANCE_TYPE == 'HELM_LOCAL' }}
            id: wait_for_ci_env
            run: |
              MAX_ENVS=10
              MAX_WAIT_SECONDS=3600
              WAIT_INTERVAL=30
              WAITED=0

              while true; do
                count=$(kubectl get ns --no-headers -o custom-columns=":metadata.name" | grep '\-pr\-' | grep -v 'jupyter' | wc -l)

                if [ "$count" -lt "$MAX_ENVS" ]; then
                  echo "✅ Active CI env count is $count (less than $MAX_ENVS). Proceeding with the run."
                  break
                fi

                if [ "$WAITED" -ge "$MAX_WAIT_SECONDS" ]; then
                  echo "⏰ Timeout: Waited $WAITED seconds but still $count envs active."
                  exit 1
                fi

                echo "⏳ $count envs found. Waiting..."
                sleep $WAIT_INTERVAL
                WAITED=$((WAITED + WAIT_INTERVAL))
              done

          # Create PR namespace and PR hostname env var
          - name: Create namespace and env vars
            if: ${{ env.SKIP_TESTS != 'true' && env.GEN3_INSTANCE_TYPE == 'HELM_LOCAL' }}
            # Change the HOSTNAME with full domain name
            run: |
              if [[ "$IS_NIGHTLY_RUN" == "true" ]]; then
                NAMESPACE=nightly-build
                HOSTNAME=nightly-build.ci.planx-pla.net
              else
                NAMESPACE=${REPO}-pr-${PR_NUM}
                HOSTNAME=${REPO}-pr-${PR_NUM}.ci.planx-pla.net
              fi
              echo "NAMESPACE=$NAMESPACE" >> $GITHUB_ENV
              echo "HOSTNAME=$HOSTNAME" >> $GITHUB_ENV
              namespace_exists=$(kubectl get namespace "$NAMESPACE" --no-headers --ignore-not-found)
              if [ -n "$namespace_exists" ]; then
                echo "Namespace $NAMESPACE exists, performing force teardown..."
                helm delete $NAMESPACE -n $NAMESPACE
                kubectl delete ns $NAMESPACE
              fi
              kubectl create namespace $NAMESPACE

          # Select an unlocked environment
          # If an env is specified in a PR label use it, else pick one from the pool
          - name: Select CI environment
            if: ${{ env.SKIP_TESTS != 'true' && env.GEN3_INSTANCE_TYPE == 'ADMINVM_REMOTE' }}
            id: select_ci_env
            run: |
              env_label=$(gh api repos/$REPO_FN/pulls/$PR_NUM --jq '.labels | map(select(.name | startswith("jenkins-"))) | .[0].name')
              echo "$env_label"
              if [[ $env_label != "" && $env_label != null ]]; then
                echo "Found PR label $env_label"
                poetry run python -m gen3_ci.scripts.select_ci_environment $env_label
              else
                poetry run python -m gen3_ci.scripts.select_ci_environment
              fi
              if [ $? -ne 0 ]; then
                echo "PR_ERROR_MSG=Failed to select CI environment" >> $GITHUB_ENV
              fi

          - name: Get modified folders
            # This is applicable for Manifest PRs only
            id: get_modified_folders
            if: ${{ env.SKIP_TESTS != 'true' && (github.event.repository.name == 'cdis-manifest' || github.event.repository.name == 'gitops-qa' || github.event.repository.name == 'gen3-gitops') }}
            continue-on-error: true  # if this fails, we still need to run clean-up steps
            run: |
              PR_FILES=$(gh api repos/$REPO_FN/pulls/$PR_NUM/files --jq '.[].filename')
              if [ "$GEN3_INSTANCE_TYPE" == "HELM_LOCAL" ]; then
                UPDATED_FOLDERS=$(echo "$PR_FILES" | grep -v "^.github/" | awk -F'/' '{if ($1 != ".github" && NF > 1) print $1"/"$2}' | sort -u | tr '\n' ',' | sed 's/,$//')
              else
                UPDATED_FOLDERS=$(echo "$PR_FILES" | grep '/.*' | sed 's|/.*||' | grep -v "^.github$" | uniq | sort -u | tr '\n' ',' | sed 's/,$//')
              fi
              echo "UPDATED_FOLDERS=$UPDATED_FOLDERS" >> $GITHUB_ENV

          # Apply the changes to the manifest of the selected CI environment, roll the pods and run usersync
          # Generate API keys for test users for the environment
          - name: Prepare CI environment
            id: prep_ci_env
            if: ${{ env.SKIP_TESTS != 'true' && steps.select_ci_env.outcome == 'success' || env.GEN3_INSTANCE_TYPE == 'HELM_LOCAL' }}
            continue-on-error: true  # if this fails, we still need to run clean-up steps
            run: |
              echo $UPDATED_FOLDERS
              echo "Instance Type"
              echo $GEN3_INSTANCE_TYPE
              mkdir $HOME/.gen3
              if [[ "$GEN3_INSTANCE_TYPE" == "ADMINVM_REMOTE" ]]; then
                HOSTNAME=${NAMESPACE}.planx-pla.net
                echo "HOSTNAME=$HOSTNAME" >> $GITHUB_ENV
              fi
              poetry run python -m gen3_ci.scripts.prepare_ci_environment
              if [ $? -ne 0 ]; then
                echo "PR_ERROR_MSG=Failed to Prepare CI environment" >> $GITHUB_ENV
              fi

          # This is used for running specific test suites by labeling the PR with the test class
          # Multiple suites can be executed by adding multiple labels
          - name: Get test labels
            id: get_test_labels
            if: ${{ env.SKIP_TESTS != 'true' && steps.prep_ci_env.outcome == 'success' }}
            continue-on-error: true  # if this fails, we still need to run clean-up steps
            run: |
              if [[ -n $TEST_LABELS ]]; then
                test_label_expr="${TEST_LABELS//,/ or }"
                test_label="-k \"$test_label_expr\""
              else
                if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
                  test_label=$(gh api repos/$REPO_FN/pulls/$PR_NUM --jq '.labels | map(select(.name | test("^(?i)test"))) | map(.name) | if length > 0 then "-k \"" + join(" or ") + "\"" else "" end')
                fi
              fi
              echo $test_label
              echo "TEST_LABEL=$test_label" >> $GITHUB_ENV

          - name: Run tests pertaining to specific service
            id: run_service_tests
            if: ${{ env.SKIP_TESTS != 'true' && inputs.SERVICE_TO_TEST && steps.prep_ci_env.outcome == 'success' }}
            continue-on-error: true  # if this fails, we still need to run clean-up steps
            run: |
              mkdir output
              GEN3_INSTANCE_TYPE="$GEN3_INSTANCE_TYPE" poetry run pytest -n logical -m "${{ inputs.SERVICE_TO_TEST }} and not wip" --alluredir allure-results --no-header --dist loadscope ${{ env.TEST_LABEL }}
              if [ $? -ne 0 ]; then
                echo "PR_ERROR_MSG=Test(s) failures encountered in PR" >> $GITHUB_ENV
              fi

          - name: Run tests
            id: run_tests
            if: ${{ env.SKIP_TESTS != 'true' && !inputs.SERVICE_TO_TEST && steps.prep_ci_env.outcome == 'success' }}
            continue-on-error: true  # if this fails, we still need to run clean-up steps
            run: |
              mkdir output
              GEN3_INSTANCE_TYPE="$GEN3_INSTANCE_TYPE" poetry run pytest -n logical -m "not wip" --alluredir allure-results --no-header --dist loadscope ${{ env.TEST_LABEL }}
              if [ $? -ne 0 ]; then
                echo "PR_ERROR_MSG=Test(s) failures encountered in PR" >> $GITHUB_ENV
              fi

          - name: Debug logging
            if: ${{ env.SKIP_TESTS != 'true' }}
            continue-on-error: true  # if this fails, we still need to run clean-up steps
            run: |
              echo steps.run_service_tests.outcome = ${{ steps.run_service_tests.outcome }}
              echo steps.run_tests.outcome = ${{ steps.run_tests.outcome }}

          - name: Generate allure report
            id: generate_allure_report
            if: ${{ env.SKIP_TESTS != 'true' && steps.run_service_tests.outcome == 'success' || steps.run_service_tests.outcome == 'failure' || steps.run_tests.outcome == 'success' || steps.run_tests.outcome == 'failure' }}
            continue-on-error: true  # if this fails, we still need to run clean-up steps
            run: |
              npm install -g allure-commandline --save-dev
              allure generate allure-results -o allure-report --clean
              if [ $? -ne 0 ]; then
                echo "PR_ERROR_MSG=Failed to generate allure report" >> $GITHUB_ENV
              fi

          - name: Upload allure report to S3
            id: upload_allure_report
            if: ${{ env.SKIP_TESTS != 'true' && steps.generate_allure_report.outcome == 'success' }}
            continue-on-error: true  # if this fails, we still need to run clean-up steps
            run: |
              if [[ "$GEN3_INSTANCE_TYPE" == "ADMINVM_REMOTE" ]]; then
                AWS_ACCESS_KEY_ID="${{ secrets.CI_AWS_ACCESS_KEY_ID }}" AWS_SECRET_ACCESS_KEY="${{ secrets.CI_AWS_SECRET_ACCESS_KEY }}" aws s3 sync ./allure-report ${{ secrets.QA_DASHBOARD_S3_PATH }}/$REPO/$PR_NUM/$RUN_NUM/$ATTEMPT_NUM
              else
                if [[ "$IS_NIGHTLY_RUN" == "true" ]]; then
                  DATE=$(date +%Y%m%d)
                  aws s3 sync ./allure-report ${{ secrets.QA_DASHBOARD_S3_PATH }}/nightly-run/$DATE
                else
                  aws s3 sync ./allure-report ${{ secrets.QA_DASHBOARD_S3_PATH }}/$REPO/$PR_NUM/$RUN_NUM/$ATTEMPT_NUM
                fi
              fi
              if [ $? -ne 0 ]; then
                echo "PR_ERROR_MSG=Failed to upload allure report to s3 bucket" >> $GITHUB_ENV
              fi

          - name: Archive pod logs from CI environment
            id: archive_pod_logs
            if: ${{ env.SKIP_TESTS != 'true' && env.GEN3_INSTANCE_TYPE == 'ADMINVM_REMOTE' && steps.prep_ci_env.outcome == 'success' || env.GEN3_INSTANCE_TYPE == 'ADMINVM_REMOTE' && steps.prep_ci_env.outcome == 'failure' }}
            continue-on-error: true  # if this fails, we still need to run clean-up steps
            run: poetry run python -m gen3_ci.scripts.save_ci_env_pod_logs

          - name: Generate markdown report
            id: generate_md_report
            if: ${{ env.SKIP_TESTS != 'true' && steps.generate_allure_report.outcome == 'success' || steps.archive_pod_logs.outcome == 'success' }}
            continue-on-error: true
            # It is possible for env is prepped but tests error out, the pod logs will help in debugging env issues
            run: |
              if [ -n "${{ env.PR_ERROR_MSG }}" ]; then
                echo -e "\n${{ env.PR_ERROR_MSG }}" >> output/report.md
              fi
              if [ "${{ steps.upload_allure_report.outcome }}" == "success" ]; then
                if [[ "$IS_NIGHTLY_RUN" == "true" ]]; then
                  DATE=$(date +%Y%m%d)
                  echo -e "\nPlease find the detailed integration test report [here](https://qa.planx-pla.net/dashboard/Secure/gen3-ci-reports/nightly-run/$DATE/index.html) _(login [here](https://qa.planx-pla.net) first)_" >> output/report.md
                else
                  echo -e "\nPlease find the detailed integration test report [here](https://qa.planx-pla.net/dashboard/Secure/gen3-ci-reports/$REPO/$PR_NUM/$RUN_NUM/$ATTEMPT_NUM/index.html) _(login [here](https://qa.planx-pla.net) first)_" >> output/report.md
                fi
              fi
              if [ "${{steps.archive_pod_logs.outcome}}" == "success" && $GEN3_INSTANCE_TYPE == "ADMINVM_REMOTE" ]; then
                if [ ! -d output ]; then
                  mkdir output
                fi
                if [ ! -f "output/report.md" ]; then
                  touch "output/report.md"
                fi
                echo -e "\nPlease find the ci env pod logs [here]($POD_LOGS_URL)" >> output/report.md
              fi

          - name: Render report to the PR
            id: publish_md_report
            if: ${{ env.SKIP_TESTS != 'true' && github.event_name == 'pull_request' && steps.generate_allure_report.outcome == 'success' || steps.archive_pod_logs.outcome == 'success' }}
            continue-on-error: true  # if this fails, we still need to run clean-up steps
            run: gh pr comment $PR_NUM --body-file output/report.md -R $REPO_FN
            env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

          - name: Generate Slack report
            id: generate_slack_report
            if: ${{ env.SKIP_TESTS != 'true' && steps.generate_allure_report.outcome == 'success' || steps.archive_pod_logs.outcome == 'success' }}
            continue-on-error: true # if this fails, we still need to run clean-up steps
            run: poetry run python -m gen3_ci.scripts.generate_slack_report

          - name: Publish report to Slack
            id: slack_notify
            if: ${{ env.SKIP_TESTS != 'true' && steps.generate_slack_report.outcome == 'success' }}
            continue-on-error: true  # if this fails, we still need to run clean-up steps
            uses: slackapi/slack-github-action@v2.0.0
            with:
              method: chat.postMessage
              token: ${{ secrets.CI_SLACK_BOT_TOKEN }}
              payload-file-path: "./${{ inputs.WORKING_DIR }}/slack_report.json"
              payload-templated: true

          - name: Release CI environment
            id: release_ci_env
            if: ${{ (env.SKIP_TESTS != 'true' && env.GEN3_INSTANCE_TYPE == 'ADMINVM_REMOTE' && steps.select_ci_env.outcome == 'success') || (cancelled() && env.GEN3_INSTANCE_TYPE == 'ADMINVM_REMOTE') }}
            continue-on-error: true  # if this fails, we still need to run clean-up steps
            run: poetry run python -m gen3_ci.scripts.release_ci_environment

          - name: Mark workflow as failed for unsuccessful test runs
            if: ${{ env.SKIP_TESTS != 'true' && steps.run_service_tests.outcome != 'success' && steps.run_tests.outcome != 'success' }}
            run: echo "Test run was unsuccessful, marking workflow as failed" && exit 1

          - name: Cleanup
            if: ${{ env.SKIP_TESTS != 'true' }}
            run: |
              if [[ "$GEN3_INSTANCE_TYPE" == "ADMINVM_REMOTE" ]]; then
                poetry run python -m gen3_ci.scripts.clean_up_jenkins
              elif [[ "$GEN3_INSTANCE_TYPE" == "HELM_LOCAL" ]]; then
                poetry run python -m gen3_ci.scripts.teardown_ci_env
              fi
