name: Testing
on:
  push:
    branches:
      - '**'

jobs:
  Explore-GitHub-Actions:
    # You need to use the INSTALLATION_NAME from the previous step
    runs-on: self-hosted
    steps:
      # # Enable step debugging. Uncomment this to debug pipeline issues
      # - name: Enable Step Debugging
      #   run: echo "ACTIONS_STEP_DEBUG=true >> $GITHUB_ENV"

      # Skip integration tests when the following PR labels are present:
      # not-ready-for-ci / decommission-environment
      - name: Skip integration tests for specific PR labels
        working-directory: ${{ github.workspace }}
        run: |
          if gh api repos/$REPO_FN/pulls/$PR_NUM --jq '.labels | map(.name) | .[] | select(. == "not-ready-for-ci" or . == "decommission-environment")' | grep -q .; then
              echo "Skipping CI since one of the PR labels is present - not-ready-for-ci / decommission-environment"
              echo "SKIP_TESTS=true" >> $GITHUB_ENV
          fi

      # Checkout current repo
      - name: Checkout current repo
        if: ${{ env.SKIP_TESTS != 'true' }}
        uses: actions/checkout@v4

      # Skip tests when there are only markdown files
      - name: Skip integration tests if PR contains only Markdown files
        if: ${{ env.SKIP_TESTS != 'true' }}
        working-directory: ${{ github.workspace }}
        run: |
          git fetch -q
          FILE_TYPES=$(git show --name-only ${{ env.COMMIT_SHA }} | grep -o '\S\+\.\S\+'  | grep -v '@' | awk -F . '{print $NF}' | sort -u)
          echo $FILE_TYPES

          # Check if the only file type is markdown
          if [[ "$FILE_TYPES" == "md" ]]; then
            echo "All files are markdown, skipping step."
            echo "SKIP_TESTS=true" >> $GITHUB_ENV
          fi

      # Checkout master branch of gen3-code-vigil when another repo is under test
      - name: Checkout integration test code
        if: ${{ env.SKIP_TESTS != 'true' && github.event.repository.name  != 'gen3-code-vigil' }}
        uses: actions/checkout@v4
        with:
          repository: uc-cdis/gen3-code-vigil
          ref: ${{ inputs.TEST_REPO_BRANCH }}

      # Create PR namespace
      - name: Create namespace
        if: ${{ env.SKIP_TESTS != 'true' }}
        run: |
          echo "PR_NAMESPACE=pr-${{ github.event.pull_request.number }}" >> $GITHUB_ENV
          kubectl create namespace $PR_NAMESPACE || true

      # # Pass in the dynamic hostname for each PR
      # - name: Set hostname and create "values-override.yaml"
      #   if: ${{ env.SKIP_TESTS != 'true' }}
      #   uses: 1arp/create-a-file-action@0.4.5
      #   with:
      #     path: 'helm_values'
      #     isAbsolutePath: false
      #     file: 'values-override.yaml'
      #     content: |
      #       global:
      #         hostname: ${{ env.PR_NAMESPACE }}.planx-ci.io

      - name: test
        run: |
          cat <<EOF > my-file.txt
          global:
          hostname: ${{ env.PR_NAMESPACE }}.planx-ci.io
          EOF


      # This will set the image tag for service PRs
      - name: Append to values.yaml with the image version for service PRs
        if: ${{ env.SKIP_TESTS != 'true' && inputs.SERVICE_TO_TEST == 'true'}}
        run: |
          IMAGE_TAG=$(echo "${GITHUB_REF#refs/*/}" | tr / _)
          echo "${{ inputs.SERVICE_TO_TEST }}:" >> helm_values/values.yaml
          echo "  image:" >> helm_values/values.yaml
          echo "    tag: $IMAGE_TAG" >> helm_values/values.yaml

      # This is used for running specific test suites by labeling the PR with the test class
      # Multiple suites can be executed by adding multiple labels
      - name: Get test labels
        id: get_test_labels
        if: ${{ env.SKIP_TESTS != 'true' }}
        continue-on-error: true  # if this fails, we still need to run clean-up steps
        run: |
          test_label=$(gh api repos/$REPO_FN/pulls/$PR_NUM --jq '.labels | map(select(.name | startswith("Test"))) | map(.name) | if length > 0 then "-k \"" + join(" or ") + "\"" else "" end')
          echo $test_label
          echo "TEST_LABEL=$test_label" >> $GITHUB_ENV

      # Will install the gen3 helm charts to specific PR namespace and set the tests to run
      - name: Prepare CI environment
        id: prep_ci_env
        if: ${{ env.SKIP_TESTS != 'true' }}
        continue-on-error: true  # if this fails, we still need to run clean-up steps
        run: |
          helm repo add gen3 https://helm.gen3.org
          helm repo update
          helm upgrade --install gen3 gen3/gen3 --set tests.TEST_LABEL="-k ${{ env.TEST_LABEL }}" tests.SERVICE_TO_TEST="${{ inputs.SERVICE_TO_TEST }}" -f helm_values/values.yaml -f \
            --namespace ${{ env.PR_NAMESPACE }} \
            --wait

      # Will trigger gen3-code-vigil test suite
      - name: Run Helm Tests
        id: run_tests
        if: ${{ env.SKIP_TESTS != 'true' && steps.prep_ci_env.outcome == 'success' }}
        run: helm test gen3 --namespace $PR_NAMESPACE

      - name: Debug logging
        if: ${{ env.SKIP_TESTS != 'true' }}
        continue-on-error: true  # if this fails, we still need to run clean-up steps
        run: |
          echo steps.run_tests.outcome = ${{ steps.run_tests.outcome }}
