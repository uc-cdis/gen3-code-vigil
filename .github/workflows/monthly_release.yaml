name: Monthly Release

on:
  workflow_call:
    inputs:
      RELEASE_VERSION:
        required: true
        type: string
      LIST_OF_ENVIRONMENTS:
        required: true
        type: string
      TARGET_REPO_NAME:
        required: false
        type: string
        default: gen3-gitops
      WORKING_DIR:
        required: false
        type: string
        default: gen3-code-vigil/gen3-integration-tests

permissions:
  id-token: write
  contents: read
  pull-requests: write
  issues: write

concurrency:
  group: ${{ github.workflow }}-${{ github.event.repository.name }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
    integration_tests:
        runs-on: ubuntu-latest

        defaults:
          run:
            # the test directory in gen3-code-vigil
            working-directory: ${{ inputs.WORKING_DIR }}

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_USERNAME: "PlanXCyborg"
          REPO: ${{ github.event.repository.name }}
          REPO_FN: ${{ github.event.repository.full_name }}
          BRANCH: ${{ github.event.pull_request.head.ref }}
          PR_NUM: ${{ github.event.pull_request.number }}
          COMMIT_SHA: ${{ github.event.pull_request.head.sha }}
          RUN_NUM: ${{ github.run_number }}
          RUN_ID: ${{ github.run_id }}
          ATTEMPT_NUM: ${{ github.run_attempt }}
          GH_WORKSPACE: ${{ github.workspace }}
          RELEASE_VERSION: ${{ inputs.RELEASE_VERSION }}
          LIST_OF_ENVIRONMENTS: ${{ inputs.LIST_OF_ENVIRONMENTS }}
          TARGET_REPO_NAME: ${{ inputs.TARGET_REPO_NAME }}

        steps:
          # Ensure the PR is run under the same org as an Internal PR
          # and not by external forks/PRs
          - name: Check if PR is from the same organization
            if: ${{ github.repository_owner != 'uc-cdis' }}
            working-directory: ${{ github.workspace }}
            run:  |
              echo "github.repository_owner - ${{ github.repository_owner }}"
              echo "Skip pull requests from repositories not within the same organization"
              echo "SKIP_TESTS=true" >> $GITHUB_ENV

          - name: Checkout current repo
            if: ${{ env.SKIP_TESTS != 'true' }}
            uses: actions/checkout@v4

          - name: Split List of envs into folders
            run: |
              echo "FOLDERS=$(echo '${{ env.LIST_OF_ENVIRONMENTS }}' | tr ',' ' ')" >> $GITHUB_ENV

          - name: Loop through folders and create PRs
            run: |
              # install dependencies
              pip install -U pip
              pip install poetry
              poetry install

              git config --global user.name "$GITHUB_USERNAME"
              git config --global user.email "cdis@uchicago.edu"

              THOR_PATH="$(pwd)/thor"
              export GEN3_GITOPS_PATH="$(pwd)/$TARGET_REPO_NAME"
              export GEN3_HELM_PATH="$(pwd)/gen3-helm"
              export TEST_REPO_PATH="$(pwd)"
              export REPO_LIST_PATH="$THOR_PATH/repo_list.txt"
              export GITHUB_TOKEN=${GITHUB_TOKEN//$'\n'/}

              # Clean up if already cloned
              rm -rf "$GEN3_GITOPS_PATH"

              for folder in $FOLDERS; do
                echo "Processing folder: $folder"

                # Clone the target repo
                git clone "https://$GITHUB_USERNAME:$GITHUB_TOKEN@github.com/uc-cdis/$TARGET_REPO_NAME"
                git clone "https://$GITHUB_USERNAME:$GITHUB_TOKEN@github.com/uc-cdis/thor"
                git clone "https://$GITHUB_USERNAME:$GITHUB_TOKEN@github.com/uc-cdis/gen3-helm"
                cd "$GEN3_GITOPS_PATH"

                export TARGET_ENV=$folder
                TIMESTAMP=$(date +%s)
                PR_NAME="Gen3 Monthly Release ${RELEASE_VERSION} ${ENV} ${TIMESTAMP}"
                SANITIZED_ENV="${TARGET_ENV//\//_}"
                BRANCH_NAME="chore/apply_${RELEASE_VERSION}_to_${SANITIZED_ENV}_${TIMESTAMP}"
                COMMIT_MSG="Updating $TARGET_ENV with $RELEASE_VERSION"
                REPO_OWNER="uc-cdis"
                BASE_BRANCH="master"

                # PERFORM GIT OPERATIONS TO SWITCH TO NEW BRANCH and navigate to target env folder
                cd $GEN3_GITOPS_PATH
                git switch master
                git fetch origin
                git checkout -b "$BRANCH_NAME"
                cd "${TARGET_ENV}/values/"

                # Update the yaml files
                poetry run python $TEST_REPO_PATH/gen3_ci/scripts/monthly_release.py

                # PUSH in the branch and create a PR
                git add .
                git commit -m "${COMMIT_MSG}"
                git push origin "$BRANCH_NAME"

                curl -u "$GITHUB_USERNAME:$GITHUB_TOKEN" \
                -X POST \
                -H "Accept: application/vnd.github+json" \
                -H "Content-Type: application/json" \
                "https://api.github.com/repos/$REPO_OWNER/$TARGET_REPO_NAME/pulls" \
                -d "$(jq -n \
                    --arg title "$PR_NAME" \
                    --arg head "$BRANCH_NAME" \
                    --arg base "$BASE_BRANCH" \
                    '{title: $title, head: $head, base: $base}')"
                done
            env:
              GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
